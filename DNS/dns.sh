#!/bin/bash
# Written by David Serate
# Does something to update DNS
# This is not designed to be extensible - only to manage my local dns in 3 zones
# blue.local 
# red.local
# routing.local

if (( $EUID != 0 )); then 
	echo "Run with sudo privileges"
	exit
fi
# Parse options from the
while getopts "cei:n:z: h" option; do
	val=$OPTARG
	case $option in
		c)
			# Create the files
			action="create"
		;;
	
		e)	
			# Update the forward and reverse entries
			action="edit"
		;;

		z)
			# Zone
			zone=$val
		;;

		i)
			# IP 
			ip=$val
		;;

		n)
			# Name
			name=$val
		;;
		h)
			# Help 
			echo "dns.sh written by David Serate"
			echo "This script is designed to be used to manage a bind domain"
			echo "This comes configured to manage the red.local, blue.local, and routing.local domains"
			echo "Options:"
			echo "   -h: Displays this help menu."
			echo "   -c: Creates/resets the files."
			echo "   -e: Edits an entry. Requires -z -i -n arguments."
			echo "   -z: Specifies the zone. Must be red.local, blue.local, or routing.local."
			echo "   -i: Specifies the IP."
			echo "   -n: Specifies the name."
		;;
	esac	
done

# Handle executing everything
case $action in
	"create")
		# Create files 
		zones=("red" "blue" "routing")

		# IPs for the new networks
		ips=("20.0.5" "10.0.5" "30.0.5")


		serial=3
		mkdir /etc/bind/zones
		cp /etc/bind/named.conf.local /etc/bind/named.conf.local.old
		for i in ${!zones[@]} 
		do
			cd /etc/bind/zones
			echo "Creating ${zones[i]} forward zone file."
			# Create the specific forward lookup zone file
			touch db.${zones[i]}.local
			echo -e '$TTL \t 604800' > db.${zones[i]}.local
			echo -e "@ \t IN \t SOA \t ${zones[i]}.local. \t root.${zones[i]}.local. ($serial)" >> db.${zones[i]}.local
			echo -e "604800     ; Refresh" >> db.${zones[i]}.local
            echo -e "86400     ; Retry" >> db.${zones[i]}.local
            echo -e "2419200     ; Expire" >> db.${zones[i]}.local
            echo -e "604800    ; Negative Cache TTL \n)" >> db.${zones[i]}.local
 			# Hardcoding in box
 			echo -e "\tIN\tNS\tansible.routing.local." >> db.${zones[i]}.local

			# not hardcoding the reversed IPs 
			rip=$(echo ${ips[i]} | cut -d. -f 3).$(echo ${ips[i]} | cut -d. -f 2).$(echo ${ips[i]} | cut -d. -f 1)

			echo "Creating ${zones[i]} reverse zone file."
			# Create the reverse lookup zone file 
			touch db."$rip".local
			echo -e '$TTL \t 604800' > db."$rip".local
			echo -e "@ \t IN \t SOA \t ${zones[i]}.local. \t root.${zones[i]}.local. ( $serial" >> db."$rip".local
			echo -e "604800     ; Refresh" >> db."$rip".local
            echo -e "86400     ; Retry" >> db."$rip".local
            echo -e "2419200     ; Expire" >> db."$rip".local
            echo -e "604800    ; Negative Cache TTL \n)" >> db."$rip".local
 			# Hardcoding in IP of the box
 			echo -e "\tIN\tNS\tansible.routing.local." >> db."$rip".local
			
			# Increment serial
			serial=$(($serial + 1))
			
			# Go up a directory from /etc/bind/zones to /etc/bind/
			cd ..

			# wget the template 
			wget -O namedlocal https://raw.githubusercontent.com/SirSertile/pentestlab/master/DNS/namedlocal
			# Replace the ZONE with the zone name
			sed -i "s/ZONE/${zones[i]}.local/g" namedlocal
			# Repalce the RIP with the IP 
			sed -i "s/RIP/$rip/g" namedlocal
			# Repalce the RZON with the reverse zone name 
			sed -i "s/RZON/$rip.local/g" namedlocal


			# Add a segment to the named.conf.local
			if [ -z "$(grep -x "$(sed '1q;d' namedlocal)" named.conf.local)" ] && [ -z "$(grep -x "$(sed '5q;d' namedlocal)" named.conf.local)" ]; then
				echo "added namedlocal stuff"
				cat namedlocal >> named.conf.local
			fi

			# rm namedlocal to clean up 
			rm namedlocal
		done
		ufw allow bind9
	;;
	edit)
		# Make sure you have all the variables
		if [ -z $ip ] || [ -z $name ] || [ -z $zone ]; then
			echo "Please specify the name(-n), IP(-i), zone(-z)."
			exit 1
		else
			cd /etc/bind/zones
			# Make A records filename
			afile=db.$zone
			# Make backup of the zone file
			cp $afile $afile.old
			# Remove the line that matches 
			sed "s/^$name\.$zone\.[[:blank:]]IN[[:blank:]]A*/$name\.$zone\.\tIN\tA\t$ip/g" $afile.old > $afile
			
			# Were any changes made? 
			if [ "$(cat $afile)" = "$(cat $afile.old)" ]; then
				# No changes were made - append to the file
				echo -e "$name.$zone.\tIN\tA\t$ip" >> $afile
				echo "New A Record created."
			else
				echo "A Record modified."
			fi
			
			# Make PTR records filename
			octet1=$(echo "10.0.5.2" | cut -d. -f 1)
			octet2=$(echo "10.0.5.2" | cut -d. -f 2)
			octet3=$(echo "10.0.5.2" | cut -d. -f 3)
			ptrfile="db.$octet3.$octet2.$octet1.local"
			# Find if the appropriate PTR record file has the entry 

			# If it does, delete it 
			# Create new entry at bottom of file 
			# Make backup of the zone file
			cp $ptrfile $ptrfile.old
			# Remove the line that matches 
			sed "s/^*IN[[:blank:]]PTR[[:blank:]]/$ip\tIN\tPTR\t$name.$zone./g" $ptrfile.old > $ptrfile
			
			# Were any changes made? 
			if [ "$(cat $ptrfile)" = "$(cat $ptrfile.old)" ]; then
				# No changes were made - append to the file
				echo -e "$name.$zone.\tIN\tA\t$ip" >> $ptrfile
				echo "New PTR Record created."
			else
				echo "PTR Record modified."
			fi
		fi
	;;
esac